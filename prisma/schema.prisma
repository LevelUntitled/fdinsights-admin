// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "sqlite"
//   // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
//   // Further reading:
//   // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
//   // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
//   url      = env("DATABASE_URL")
// }
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FDClient {
  id          String @id @default(cuid())
  company     String?
  logo        String
  industry    String
  addLine1    String
  addLine2    String
  city        String
  postcode    Int
  state       String
  fiscalStart DateTime
  fiscalEnd   DateTime
  subStart    DateTime
  subEnd      DateTime
  clientSince DateTime @default(now())
  updatedAt   DateTime @updatedAt
  notes       String
  subDomain   String
  role        Role     @default(CLIENT)
  status      Status   @default(ACTIVE)
  health      Decimal
  nps         Decimal
  users       FDUser[]
  keyContact  String
  sso         SSO
}

model FDUser {
  id              String    @id @default(cuid())
  firstName       String?
  lastName        String?
  country         String?
  state           String?
  email           String?   @unique
  linkedin        String?
  createdAt       DateTime  @default(now())
  client          FDClient @relation(fields: [id], references: [id])
  status          Status
  // modulesEnabled  Modules[] 
  lastActive      DateTime
  logs            Logs[]
  metaData        String?
}

model Vendors{
  id   Int     @id @default(autoincrement())
  name String? @unique
}

model Modules{
  id       Int      @id @default(autoincrement())
  name     String?  @unique
}

model MediaMarket{
  id      Int       @id @default(autoincrement())
  name    String?   @unique
}

model ProductionMarket{
  id      Int           @id @default(autoincrement())
  name    String?       @unique
}

model AgencyMarket{
  id      Int           @id @default(autoincrement())
  name    String?       @unique
}

model Logs{
  id        String    @id @default(cuid())
  userID    String
  user      FDUser    @relation(fields: [userID], references: [id])
  log_time  DateTime  @default(now())
}

enum Role {
  CLIENT
  ADMIN
}

enum Status{
  ACTIVE
  BLOCKED
  ARCHIVED
  DELETED
  INACTIVE
  INVITED
}

enum SSO{
  GOOGLE
  MICROSOFT
}