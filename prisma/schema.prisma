// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "sqlite"
//   // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
//   // Further reading:
//   // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
//   // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
//   url      = env("DATABASE_URL")
// }
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FDClient {
  id                String @id @default(cuid())
  company           String?
  logo              String
  industry          String
  addLine1          String
  addLine2          String
  city              String
  postcode          Int
  state             String
  fiscalStart       DateTime
  fiscalEnd         DateTime
  subStart          DateTime
  subEnd            DateTime
  clientSince       DateTime @default(now())
  updatedAt         DateTime @updatedAt
  notes             String
  subDomain         String   @unique
  role              Role     @default(CLIENT)
  status            Status   @default(ACTIVE)
  health            Decimal
  nps               Decimal
  users             FDUser[] // key contact
  keyContact        String
  sso               SSO
  vendorTypes       Json?    // vendor type list, this will contain an array
  modulesEnabled    ClientsAndModules[]
  description       String?
  mediaMarket       Json?
  agencyMarket      Json?
  productionMarket  Json?
  markets           MarketsAndFDClients[]
  disciplines       DisciplinesAndFDClients[]
  // isDeleted   Boolean  @default(false)
  lastModified  DateTime  @updatedAt
}

model FDUser {
  id              String    @id @default(cuid())
  firstName       String
  lastName        String
  country         String
  state           String
  email           String    @unique
  linkedin        String
  createdAt       DateTime  @default(now())
  client          FDClient  @relation(fields: [id], references: [id])
  status          Status    @default(ACTIVE)
  // modulesEnabled  Modules[] 
  logs            Logs[]
  // isDeleted   Boolean  @default(false)
  lastModified  DateTime  @updatedAt
}

model Vendors{
  id            Int        @id @default(autoincrement())
  name          String     @unique
  industry      String  
  headquarters  String
  foundedYear   Int
  staffCount    Int
  type          String
  parentOrg     String
  subsidiaries  Json
  linkedinUrl   String
  tags          Json
  lastModified  DateTime  @updatedAt
}

model Modules{
  id       Int      @id @default(autoincrement())
  name     String   @unique
  clients  ClientsAndModules[]
  lastModified  DateTime  @updatedAt
}

model ClientsAndModules {
  client    FDClient   @relation(fields: [clientId], references: [id])
  clientId  String
  module    Modules    @relation(fields: [moduleId], references: [id])
  moduleId  Int
  
  @@id([clientId, moduleId])
  lastModified  DateTime  @updatedAt
}

model MediaMarket{
  id      Int       @id @default(autoincrement())
  name    String    @unique
  country String 
  status  Status    @default(ACTIVE)
  lastModified  DateTime  @updatedAt
}

model ProductionMarket{
  id      Int          @id @default(autoincrement())
  name    String       @unique
  country String 
  status  Status       @default(ACTIVE)
  lastModified  DateTime  @updatedAt
}

model AgencyMarket{
  id      Int           @id @default(autoincrement())
  name    String        @unique
  lastModified  DateTime  @updatedAt
}

model Logs{
  id        String    @id @default(cuid())
  userID    String
  user      FDUser    @relation(fields: [userID], references: [id])
  log_time  DateTime  @default(now())
  lastModified  DateTime  @updatedAt

}


model Markets{
  id      Int     @id @default(autoincrement())
  name    String
  country String
  status  Status  @default(ACTIVE)
  users   MarketsAndFDClients[]
  lastModified  DateTime  @updatedAt

}

model Disciplines{
  id          Int     @id @default(autoincrement())
  name        String
  description String
  status      Status  @default(ACTIVE)
  clients     DisciplinesAndFDClients[]
  lastModified  DateTime  @updatedAt

}

model MarketsAndFDClients{
  client    FDClient   @relation(fields: [clientId], references: [id])
  clientId  String
  markets   Markets    @relation(fields: [marketId], references: [id])
  marketId  Int
  
  @@id([clientId, marketId])
  lastModified  DateTime  @updatedAt

}

model DisciplinesAndFDClients{
  client       FDClient   @relation(fields: [clientId], references: [id])
  clientId     String
  discipline   Disciplines    @relation(fields: [disciplineId], references: [id])
  disciplineId Int
  
  @@id([clientId, disciplineId])
  lastModified  DateTime  @updatedAt

}

model Metrics{
  metricId            Int       @id @default(autoincrement())
  metricName          String
  metricDescription   String
  metricCategory      String
  metricStatus        Status    @default(ACTIVE)

  metricRates         MetricRates?
  lastModified        DateTime  @updatedAt

}

model MetricRates{
  id            Int       @id @default(autoincrement())
  metric        Metrics   @relation(fields: [metricId], references: [metricId])
  metricId      Int       @unique
  discipline    String
  market        String
  value         Int
  tier          String
  status        Status    @default(ACTIVE)
  lastModified  DateTime  @updatedAt
}

model Staff{
  id                Int    @id @default(autoincrement())
  jobTitle          String
  expInYrs          Int
  abbrevations      String
  description       String
  alternativeTitles String?
  status            Status @default(ACTIVE)

  // staffRates        StaffRates?
  lastModified      DateTime  @updatedAt
}

model StaffRates{
  id            Int       @id @default(autoincrement())
  jobTitle      String
  discipline    String
  market        String
  dept          String
  tier          String
  status        Status    @default(ACTIVE)
  lastModified  DateTime  @updatedAt
}

model Channel{
  id          Int     @id @default(autoincrement())
  name        String
  desc        String
  status      Status  @default(ACTIVE)
  lastModified  DateTime  @updatedAt
}

model ChannelRates{
  id            Int    @id @default(autoincrement())
  market        String
  discipline    String
  lowRate       Int
  highRate      Int
  status        Status  @default(ACTIVE)
  lastModified  DateTime  @updatedAt
}

model ChannelNotes{
  id         Int           @id @default(autoincrement())
  market     String
  channels   Json
  notes      String
  status     Status       @default(ACTIVE)
  lastModified  DateTime  @updatedAt
}

model assets{
  id        Int       @id @default(autoincrement())
  name      String 
  category  String
  type      String
  status    Status    @default(ACTIVE)
  lastModified  DateTime  @updatedAt
}

model AssetsRates{
  id            Int       @id @default(autoincrement())
  name          String
  discipline    String
  dept          String
  jobTitle      String
  category      String
  type          String
  status        Status   @default(ACTIVE)
  goldPrice     Json
  silverPrice   Json
  bronzePrice   Json
  lastModified  DateTime  @updatedAt
}

model Elements{
  id      Int     @id @default(autoincrement())
  name    String
  desc    String
  type    String
  status  Status  @default(ACTIVE)
  lastModified  DateTime  @updatedAt
}

model ElementsRates{
  id            Int   @id @default(autoincrement())
  name          String
  markets       String
  discipline    String
  goldPrice     Json
  silverPrice   Json
  bronzePrice   Json
  status        Status  @default(ACTIVE)
  lastModified  DateTime  @updatedAt
}

enum Role {
  CLIENT
  ADMIN
}

enum Status{
  ACTIVE
  BLOCKED
  ARCHIVED
  DELETED
  INACTIVE
  INVITED
}

enum SSO{
  GOOGLE
  MICROSOFT
}